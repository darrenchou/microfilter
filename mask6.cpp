/*****************************************************************************
 * mask6.cpp 
 *                        --------------------------------------------
 *  Created               : Tue May 29 11:24:38 2018
 *  template generated by : pvdevelop (C) Lehrig Software Engineering
 *  email                 : lehrig@t-online.de 
 *                        --------------------------------------------
 * This file is part of OSAUT and OSORNOD projects. OSAUT is a free definition,
 * ehich may be used under the Creative Commons Share-alike license with the
 * additional condition of notifying the original author(s) of deviations and
 * expansion of the work.OSORNOD is intended to be released in the near future
 * as free software that you then can redistribute it and/or modify it under
 * the terms of the GNU General Public License as published by the Free 
 * Software Foundation, version 3. However,up to that point, OSORNOD software
 * and any or all of its components are proprietary and may not be modified or
 * distributed without express approval of Osorno Enterprises Inc.
 *
 * This program is distributed WITHOUT ANY WARRANTY; without even the implied
 * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 *
 * A copy of the GNU General Public License can be obtained from the Free 
 * Software Foundation, Inc., 51  Franklin Street, Fifth Floor, Boston,
 * MA 02110-1301 USA.
 *
 * Copyright Osorno Enterprises Inc., 2018
 *
 * Norway House OSAUT and OSORNOD project
 * (c) Osorno Enterprises Inc., 2018: http://www.osorno.ca/
 * 
 ****************************************************************************/

#include "pvapp.h"

// _begin_of_generated_area_ (do not edit -> use ui2pvc) -------------------

// our mask contains the following objects
enum {
  ID_MAIN_WIDGET = 0,
  frmBg,
  imgHeader,
  lblHeader,
  frmWTS,
  lblFLT,
  btnWTS_Monitor,
  btnWTS_Service,
  imgWTS_Monitor,
  imgBlackWtp,
  imgWTS_Service,
  imgServWTS,
  frmTopSeparator,
  frmBottomSeparator,
  lblPlantName,
  imgBlockFg,
  lblUperStatus,
  frmInfo,
  btnAbout,
  btnStatistics,
  imgInfo1,
  imgBlackInfo,
  lblInfo,
  imgStatistics,
  imgBlackGraph,
  frmMenu,
  lblMenu,
  ID_END_OF_WIDGETS
};

// our mask contains the following widget names
  static const char *widgetName[] = {
  "ID_MAIN_WIDGET",
  "frmBg",
  "imgHeader",
  "lblHeader",
  "frmWTS",
  "lblFLT",
  "btnWTS_Monitor",
  "btnWTS_Service",
  "imgWTS_Monitor",
  "imgBlackWtp",
  "imgWTS_Service",
  "imgServWTS",
  "frmTopSeparator",
  "frmBottomSeparator",
  "lblPlantName",
  "imgBlockFg",
  "lblUperStatus",
  "frmInfo",
  "btnAbout",
  "btnStatistics",
  "imgInfo1",
  "imgBlackInfo",
  "lblInfo",
  "imgStatistics",
  "imgBlackGraph",
  "frmMenu",
  "lblMenu",
  "ID_END_OF_WIDGETS",
  ""};

  static const char *toolTip[] = {
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  ""};

  static const char *whatsThis[] = {
  "",
  "",
  "images/misc/osorno_logo.png",
  "",
  "",
  "",
  "",
  "",
  "images/icons/40/flatGrey.png",
  "images/icons/26/black_wtp.png",
  "images/icons/40/flatGrey.png",
  "images/icons/26/black_oper.png",
  "",
  "",
  "",
  "images/misc/block_fg.png",
  "",
  "",
  "",
  "",
  "images/icons/40/semGreenL.png",
  "images/icons/26/black_info.png",
  "",
  "images/icons/40/semGreenL.png",
  "images/icons/26/black_graph.png",
  "",
  "",
  ""};

  static const int widgetType[ID_END_OF_WIDGETS+1] = {
  0,
  TQFrame,
  TQImage,
  TQLabel,
  TQFrame,
  TQLabel,
  TQPushButton,
  TQPushButton,
  TQImage,
  TQImage,
  TQImage,
  TQImage,
  TQFrame,
  TQFrame,
  TQLabel,
  TQImage,
  TQLabel,
  TQFrame,
  TQPushButton,
  TQPushButton,
  TQImage,
  TQImage,
  TQLabel,
  TQImage,
  TQImage,
  TQFrame,
  TQLabel,
  -1 };

static int generated_defineMask(PARAM *p)
{
  int w,h,depth;

  if(p == NULL) return 1;
  if(widgetName[0] == NULL) return 1; // suppress unused warning
  w = h = depth = strcmp(toolTip[0],whatsThis[0]);
  if(widgetType[0] == -1) return 1;
  if(w==h) depth=0; // fool the compiler
  pvStartDefinition(p,ID_END_OF_WIDGETS);

  pvQFrame(p,frmBg,0,NoFrame,Plain,0,1);
  pvSetGeometry(p,frmBg,1,1,800,600);
  pvSetPaletteBackgroundColor(p,frmBg,200,200,180);
  pvSetFont(p,frmBg,"Sans",10,0,0,0,0);

  pvDownloadFile(p,"images/misc/osorno_logo.png");
  pvQImage(p,imgHeader,frmBg,"images/misc/osorno_logo.png",&w,&h,&depth);
  pvSetGeometry(p,imgHeader,570,22,192,49);
  pvSetFont(p,imgHeader,"Sans",10,0,0,0,0);
  pvSetWhatsThis(p,imgHeader,pvtr("images/misc/osorno_logo.png"));

  pvQLabel(p,lblHeader,frmBg);
  pvSetGeometry(p,lblHeader,20,15,430,60);
  pvSetText(p,lblHeader,pvtr("Microfiltration Solutions"));
  pvSetPaletteForegroundColor(p,lblHeader,120,120,70);
  pvSetFont(p,lblHeader,"Sans",24,0,0,0,0);

  pvQFrame(p,frmWTS,frmBg,Panel,Raised,1,1);
  pvSetGeometry(p,frmWTS,27,213,740,50);
  pvSetPaletteBackgroundColor(p,frmWTS,150,150,100);
  pvSetFont(p,frmWTS,"Sans",10,0,0,0,0);

  pvQLabel(p,lblFLT,frmWTS);
  pvSetGeometry(p,lblFLT,15,9,290,30);
  pvSetText(p,lblFLT,pvtr("  Microfiltration System"));
  pvSetPaletteForegroundColor(p,lblFLT,220,220,200);
  pvSetFont(p,lblFLT,"Sans",14,0,0,0,0);

  pvQPushButton(p,btnWTS_Monitor,frmWTS);
  pvSetGeometry(p,btnWTS_Monitor,375,7,140,36);
  pvSetText(p,btnWTS_Monitor,pvtr("Monitoring"));
  pvSetFont(p,btnWTS_Monitor,"Sans",13,0,0,0,0);

  pvQPushButton(p,btnWTS_Service,frmWTS);
  pvSetGeometry(p,btnWTS_Service,585,7,140,36);
  pvSetText(p,btnWTS_Service,pvtr("Service"));
  pvSetFont(p,btnWTS_Service,"Sans",13,0,0,0,0);

  pvDownloadFile(p,"images/icons/40/flatGrey.png");
  pvQImage(p,imgWTS_Monitor,frmWTS,"images/icons/40/flatGrey.png",&w,&h,&depth);
  pvSetGeometry(p,imgWTS_Monitor,320,6,40,40);
  pvSetFont(p,imgWTS_Monitor,"Sans",10,0,0,0,0);
  pvSetWhatsThis(p,imgWTS_Monitor,pvtr("images/icons/40/flatGrey.png"));

  pvDownloadFile(p,"images/icons/26/black_wtp.png");
  pvQImage(p,imgBlackWtp,imgWTS_Monitor,"images/icons/26/black_wtp.png",&w,&h,&depth);
  pvSetGeometry(p,imgBlackWtp,6,6,26,26);
  pvSetFont(p,imgBlackWtp,"Sans",10,0,0,0,0);
  pvSetWhatsThis(p,imgBlackWtp,pvtr("images/icons/26/black_wtp.png"));

  pvDownloadFile(p,"images/icons/40/flatGrey.png");
  pvQImage(p,imgWTS_Service,frmWTS,"images/icons/40/flatGrey.png",&w,&h,&depth);
  pvSetGeometry(p,imgWTS_Service,535,6,40,40);
  pvSetFont(p,imgWTS_Service,"Sans",10,0,0,0,0);
  pvSetWhatsThis(p,imgWTS_Service,pvtr("images/icons/40/flatGrey.png"));

  pvDownloadFile(p,"images/icons/26/black_oper.png");
  pvQImage(p,imgServWTS,imgWTS_Service,"images/icons/26/black_oper.png",&w,&h,&depth);
  pvSetGeometry(p,imgServWTS,7,7,26,26);
  pvSetFont(p,imgServWTS,"Sans",10,0,0,0,0);
  pvSetWhatsThis(p,imgServWTS,pvtr("images/icons/26/black_oper.png"));

  pvQFrame(p,frmTopSeparator,frmBg,HLine,Sunken,1,1);
  pvSetGeometry(p,frmTopSeparator,1,86,800,2);
  pvSetFont(p,frmTopSeparator,"Sans",10,0,0,0,0);

  pvQFrame(p,frmBottomSeparator,frmBg,HLine,Sunken,1,1);
  pvSetGeometry(p,frmBottomSeparator,1,540,800,2);
  pvSetFont(p,frmBottomSeparator,"Sans",10,0,0,0,0);

  pvQLabel(p,lblPlantName,frmBg);
  pvSetGeometry(p,lblPlantName,30,553,550,30);
  pvSetText(p,lblPlantName,pvtr("Microfiltration Plant"));
  pvSetPaletteForegroundColor(p,lblPlantName,120,120,70);
  pvSetFont(p,lblPlantName,"Sans",16,0,1,0,0);

  pvDownloadFile(p,"images/misc/block_fg.png");
  pvQImage(p,imgBlockFg,frmBg,"images/misc/block_fg.png",&w,&h,&depth);
  pvSetGeometry(p,imgBlockFg,799,599,800,600);
  pvSetFont(p,imgBlockFg,"Sans",10,0,0,0,0);
  pvSetWhatsThis(p,imgBlockFg,pvtr("images/misc/block_fg.png"));

  pvQLabel(p,lblUperStatus,frmBg);
  pvSetGeometry(p,lblUperStatus,180,65,540,20);
  pvSetPaletteForegroundColor(p,lblUperStatus,149,54,27);
  pvSetFont(p,lblUperStatus,"Sans",13,0,1,0,0);

  pvQFrame(p,frmInfo,frmBg,Panel,Raised,1,1);
  pvSetGeometry(p,frmInfo,24,270,740,50);
  pvSetPaletteBackgroundColor(p,frmInfo,150,150,100);
  pvSetFont(p,frmInfo,"Sans",10,0,0,0,0);

  pvQPushButton(p,btnAbout,frmInfo);
  pvSetGeometry(p,btnAbout,585,7,140,36);
  pvSetText(p,btnAbout,pvtr("About"));
  pvSetFont(p,btnAbout,"Sans",13,0,0,0,0);

  pvQPushButton(p,btnStatistics,frmInfo);
  pvSetGeometry(p,btnStatistics,375,7,140,36);
  pvSetText(p,btnStatistics,pvtr("Statistics"));
  pvSetFont(p,btnStatistics,"Sans",13,0,0,0,0);

  pvDownloadFile(p,"images/icons/40/semGreenL.png");
  pvQImage(p,imgInfo1,frmInfo,"images/icons/40/semGreenL.png",&w,&h,&depth);
  pvSetGeometry(p,imgInfo1,535,6,40,40);
  pvSetFont(p,imgInfo1,"Sans",10,0,0,0,0);
  pvSetWhatsThis(p,imgInfo1,pvtr("images/icons/40/semGreenL.png"));

  pvDownloadFile(p,"images/icons/26/black_info.png");
  pvQImage(p,imgBlackInfo,imgInfo1,"images/icons/26/black_info.png",&w,&h,&depth);
  pvSetGeometry(p,imgBlackInfo,6,7,26,26);
  pvSetFont(p,imgBlackInfo,"Sans",10,0,0,0,0);
  pvSetWhatsThis(p,imgBlackInfo,pvtr("images/icons/26/black_info.png"));

  pvQLabel(p,lblInfo,frmInfo);
  pvSetGeometry(p,lblInfo,30,9,280,30);
  pvSetText(p,lblInfo,pvtr("Additional  Information"));
  pvSetPaletteForegroundColor(p,lblInfo,220,220,200);
  pvSetFont(p,lblInfo,"Sans",14,0,0,0,0);

  pvDownloadFile(p,"images/icons/40/semGreenL.png");
  pvQImage(p,imgStatistics,frmInfo,"images/icons/40/semGreenL.png",&w,&h,&depth);
  pvSetGeometry(p,imgStatistics,315,6,40,40);
  pvSetFont(p,imgStatistics,"Sans",10,0,0,0,0);
  pvSetWhatsThis(p,imgStatistics,pvtr("images/icons/40/semGreenL.png"));

  pvDownloadFile(p,"images/icons/26/black_graph.png");
  pvQImage(p,imgBlackGraph,imgStatistics,"images/icons/26/black_graph.png",&w,&h,&depth);
  pvSetGeometry(p,imgBlackGraph,12,3,26,26);
  pvSetFont(p,imgBlackGraph,"Sans",10,0,0,0,0);
  pvSetWhatsThis(p,imgBlackGraph,pvtr("images/icons/26/black_graph.png"));

  pvQFrame(p,frmMenu,0,Panel,Raised,1,1);
  pvSetGeometry(p,frmMenu,30,150,740,50);
  pvSetPaletteBackgroundColor(p,frmMenu,150,150,100);
  pvSetFont(p,frmMenu,"Sans",10,1,0,0,0);

  pvQLabel(p,lblMenu,frmMenu);
  pvSetGeometry(p,lblMenu,260,6,250,40);
  pvSetText(p,lblMenu,pvtr("SCADA Main Menu :"));
  pvSetPaletteForegroundColor(p,lblMenu,220,220,200);
  pvSetFont(p,lblMenu,"Sans",18,1,0,0,0);


  pvEndDefinition(p);
  return 0;
}

// _end_of_generated_area_ (do not edit -> use ui2pvc) ---------------------

#include "mask6_slots.h"
#include "dispatcher.h"

//!****************************************************************************
static int defineMask(PARAM *p)
{
  int i;

  if(p == NULL) return 1;

  pvDownloadFile(p, LIGHT_FLAT_40);
  pvDownloadFile(p, LIGHT_GRAY_40);
  pvDownloadFile(p, LIGHT_GREEN_40);
  pvDownloadFile(p, LIGHT_RED_40);

  pvDownloadFile(p, IMG_26_BLACK_BLD);
  pvDownloadFile(p, IMG_26_BLACK_PRETREAT);
  pvDownloadFile(p, IMG_26_BLACK_GRAPH);
  pvDownloadFile(p, IMG_26_BLACK_GLASS);
  pvDownloadFile(p, IMG_26_BLACK_INFO);
  pvDownloadFile(p, IMG_26_BLACK_RO);
  pvDownloadFile(p, IMG_26_BLACK_OPER);
  pvDownloadFile(p, IMG_26_BLACK_WTP);
  pvDownloadFile(p, IMG_26_BLACK_POSTREAT);
  
  generated_defineMask(p);

  for (i = 0; i < ID_END_OF_WIDGETS; i++){
      if (widgetType[i] == TQPushButton){
         pvSetPaletteBackgroundColor(p,i,225,225,225);
      }
  }

  return 0;
}

//!****************************************************************************
static int showData(PARAM *p, DATA *d)
{
  int i = 0, id = 0, state = 0;
  
  if(p == NULL || d == NULL) return 1;

  observer_timeout_monitoring(p, imgBlockFg, lblUperStatus, &(d->session));
  /*
  while (MainMenu_Units[i].unit_type != DUMMY_ID){
     if (MainMenu_Units[i].img_ui.up2d == 0){
        id    = MainMenu_Units[i].img_ui.ui_id;
        state = MainMenu_Units[i].img_ui.state;
        pvSetImage(p, id, pvtr(units_img_tbl[state]));
        MainMenu_Units[i].img_ui.up2d = 1;
     }
     if (MainMenu_Units[i].btn_ui.up2d == 0){
        id    = MainMenu_Units[i].btn_ui.ui_id;
        state = MainMenu_Units[i].btn_ui.state;
        pvSetEnabled(p, id, state);
        MainMenu_Units[i].btn_ui.up2d = 1;
     }
     i++;
  } 
  */ 
  return 0;
}

//!****************************************************************************
static int readData(DATA *d)
{
  if(d == NULL) return 1;
  //++++
  ///update_units_ui_data(d, 0);
  return 0;
}

//!****************************************************************************
int show_mask6(PARAM *p)
{
  DATA d;
  char event[MAX_EVENT_LENGTH];
  char text[MAX_EVENT_LENGTH];
  char str1[MAX_EVENT_LENGTH];
  int  i,w,h,val,x,y,button,ret;
  float xval, yval;

  defineMask(p);
  //rlSetDebugPrintf(1);
  if((ret=slotInit(p,&d)) != 0) return ret;
  readData(&d); // from shared memory, database or something else
  //reset_resolved_event_requests(); ?//just the original is like this
  showData(p,&d);
  pvClearMessageQueue(p);
  while(1)
  {
    pvPollEvent(p,event);
    switch(pvParseEvent(event, &i, text))
    {
      case NULL_EVENT:
        readData(&d); // from shared memory, database or something else
        //reset_resolved_event_requests();    ?//just the original is like this
        showData(p,&d);
        if((ret=slotNullEvent(p,&d)) != 0) return ret;
        break;
      case BUTTON_EVENT:
        if(trace) printf("BUTTON_EVENT id=%d\n",i);
        if((ret=slotButtonEvent(p,i,&d)) != 0) return ret;
        break;
      case BUTTON_PRESSED_EVENT:
        if(trace) printf("BUTTON_PRESSED_EVENT id=%d\n",i);
        if((ret=slotButtonPressedEvent(p,i,&d)) != 0) return ret;
        break;
      case BUTTON_RELEASED_EVENT:
        if(trace) printf("BUTTON_RELEASED_EVENT id=%d\n",i);
        if((ret=slotButtonReleasedEvent(p,i,&d)) != 0) return ret;
        break;
      case TEXT_EVENT:
        if(trace) printf("TEXT_EVENT id=%d %s\n",i,text);
        if((ret=slotTextEvent(p,i,&d,text)) != 0) return ret;
        break;
      case SLIDER_EVENT:
        sscanf(text,"(%d)",&val);
        if(trace) printf("SLIDER_EVENT val=%d\n",val);
        if((ret=slotSliderEvent(p,i,&d,val)) != 0) return ret;
        break;
      case CHECKBOX_EVENT:
        if(trace) printf("CHECKBOX_EVENT id=%d %s\n",i,text);
        if((ret=slotCheckboxEvent(p,i,&d,text)) != 0) return ret;
        break;
      case RADIOBUTTON_EVENT:
        if(trace) printf("RADIOBUTTON_EVENT id=%d %s\n",i,text);
        if((ret=slotRadioButtonEvent(p,i,&d,text)) != 0) return ret;
        break;
      case GL_INITIALIZE_EVENT:
        if(trace) printf("you have to call initializeGL()\n");
        if((ret=slotGlInitializeEvent(p,i,&d)) != 0) return ret;
        break;
      case GL_PAINT_EVENT:
        if(trace) printf("you have to call paintGL()\n");
        if((ret=slotGlPaintEvent(p,i,&d)) != 0) return ret;
        break;
      case GL_RESIZE_EVENT:
        sscanf(text,"(%d,%d)",&w,&h);
        if(trace) printf("you have to call resizeGL(w,h)\n");
        if((ret=slotGlResizeEvent(p,i,&d,w,h)) != 0) return ret;
        break;
      case GL_IDLE_EVENT:
        if((ret=slotGlIdleEvent(p,i,&d)) != 0) return ret;
        break;
      case TAB_EVENT:
        sscanf(text,"(%d)",&val);
        if(trace) printf("TAB_EVENT(%d,page=%d)\n",i,val);
        if((ret=slotTabEvent(p,i,&d,val)) != 0) return ret;
        break;
      case TABLE_TEXT_EVENT:
        sscanf(text,"(%d,%d,",&x,&y);
        pvGetText(text,str1);
        if(trace) printf("TABLE_TEXT_EVENT(%d,%d,\"%s\")\n",x,y,str1);
        if((ret=slotTableTextEvent(p,i,&d,x,y,str1)) != 0) return ret;
        break;
      case TABLE_CLICKED_EVENT:
        sscanf(text,"(%d,%d,%d)",&x,&y,&button);
        if(trace) printf("TABLE_CLICKED_EVENT(%d,%d,button=%d)\n",x,y,button);
        if((ret=slotTableClickedEvent(p,i,&d,x,y,button)) != 0) return ret;
        break;
      case SELECTION_EVENT:
        sscanf(text,"(%d,",&val);
        pvGetText(text,str1);
        if(trace) printf("SELECTION_EVENT(column=%d,\"%s\")\n",val,str1);
        if((ret=slotSelectionEvent(p,i,&d,val,str1)) != 0) return ret;
        break;
      case CLIPBOARD_EVENT:
        sscanf(text,"(%d",&val);
        if(trace) printf("CLIPBOARD_EVENT(id=%d)\n",val);
        if(trace) printf("clipboard = \n%s\n",p->clipboard);
        if((ret=slotClipboardEvent(p,i,&d,val)) != 0) return ret;
        break;
      case RIGHT_MOUSE_EVENT:
        if(trace) printf("RIGHT_MOUSE_EVENT id=%d text=%s\n",i,text);
        if((ret=slotRightMouseEvent(p,i,&d,text)) != 0) return ret;
        break;
      case KEYBOARD_EVENT:
        sscanf(text,"(%d",&val);
        if(trace) printf("KEYBOARD_EVENT modifier=%d key=%d\n",i,val);
        if((ret=slotKeyboardEvent(p,i,&d,val,i)) != 0) return ret;
        break;
      case PLOT_MOUSE_MOVED_EVENT:
        sscanf(text,"(%f,%f)",&xval,&yval);
        if(trace) printf("PLOT_MOUSE_MOVE %f %f\n",xval,yval);
        if((ret=slotMouseMovedEvent(p,i,&d,xval,yval)) != 0) return ret;
        break;
      case PLOT_MOUSE_PRESSED_EVENT:
        sscanf(text,"(%f,%f)",&xval,&yval);
        if(trace) printf("PLOT_MOUSE_PRESSED %f %f\n",xval,yval);
        if((ret=slotMousePressedEvent(p,i,&d,xval,yval)) != 0) return ret;
        break;
      case PLOT_MOUSE_RELEASED_EVENT:
        sscanf(text,"(%f,%f)",&xval,&yval);
        if(trace) printf("PLOT_MOUSE_RELEASED %f %f\n",xval,yval);
        if((ret=slotMouseReleasedEvent(p,i,&d,xval,yval)) != 0) return ret;
        break;
      case MOUSE_OVER_EVENT:
        sscanf(text,"%d",&val);
        if(trace) printf("MOUSE_OVER_EVENT %d\n",val);
        if((ret=slotMouseOverEvent(p,i,&d,val)) != 0) return ret;
        break;
      case USER_EVENT:
        if(trace) printf("USER_EVENT id=%d %s\n",i,text);
        if((ret=slotUserEvent(p,i,&d,text)) != 0) return ret;
        break;
      default:
        if(trace) printf("UNKNOWN_EVENT id=%d %s\n",i,text);
        break;
    }
  }
}