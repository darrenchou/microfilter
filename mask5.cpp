/*****************************************************************************
 * mask5.cpp
 *                        --------------------------------------------
 *  begin                 : Apr 8 11:17:50 2018
 *  template generated by : pvdevelop (C) Lehrig Software Engineering
 *  email                 : lehrig@t-online.de 
 *                        --------------------------------------------
 * This file is part of OSAUT and OSORNOD projects. OSAUT is a free definition,
 * ehich may be used under the Creative Commons Share-alike license with the
 * additional condition of notifying the original author(s) of deviations and
 * expansion of the work.OSORNOD is intended to be released in the near future
 * as free software that you then can redistribute it and/or modify it under
 * the terms of the GNU General Public License as published by the Free 
 * Software Foundation, version 3. However,up to that point, OSORNOD software
 * and any or all of its components are proprietary and may not be modified or
 * distributed without express approval of Osorno Enterprises Inc.
 *
 * This program is distributed WITHOUT ANY WARRANTY; without even the implied
 * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 *
 * A copy of the GNU General Public License can be obtained from the Free 
 * Software Foundation, Inc., 51  Franklin Street, Fifth Floor, Boston,
 * MA 02110-1301 USA.
 *
 * Copyright Osorno Enterprises Inc., 2018
 *
 * OSAUT and OSORNOD project
 * (c) Osorno Enterprises Inc., 2018: http://www.osorno.ca/
 * 
 ****************************************************************************/

#include "pvapp.h"

// _begin_of_generated_area_ (do not edit -> use ui2pvc) -------------------

// our mask contains the following objects
enum {
  ID_MAIN_WIDGET = 0,
  frmBg,
  lblStatusMessage,
  btnLogin,
  btnBack,
  btnBackspace,
  btnCaps,
  btnKey_1,
  btnKey_2,
  btnKey_3,
  btnKey_4,
  btnKey_5,
  btnKey_6,
  btnKey_7,
  btnKey_8,
  btnKey_9,
  btnKey_0,
  btnKey_q,
  btnKey_w,
  btnKey_e,
  btnKey_r,
  btnKey_t,
  btnKey_y,
  btnKey_u,
  btnKey_i,
  btnKey_o,
  btnKey_p,
  btnKey_a,
  btnKey_s,
  btnKey_d,
  btnKey_f,
  btnKey_g,
  btnKey_h,
  btnKey_j,
  btnKey_k,
  btnKey_l,
  btnKey_z,
  btnKey_x,
  btnKey_c,
  btnKey_v,
  btnKey_b,
  btnKey_n,
  btnKey_m,
  imgBlockFg,
  frmInputArea,
  lblUsrName,
  lblPswd,
  txteditUsr,
  txteditPswd,
  imgBioLogo,
  ID_END_OF_WIDGETS
};

// our mask contains the following widget names
  static const char *widgetName[] = {
  "ID_MAIN_WIDGET",
  "frmBg",
  "lblStatusMessage",
  "btnLogin",
  "btnBack",
  "btnBackspace",
  "btnCaps",
  "btnKey_1",
  "btnKey_2",
  "btnKey_3",
  "btnKey_4",
  "btnKey_5",
  "btnKey_6",
  "btnKey_7",
  "btnKey_8",
  "btnKey_9",
  "btnKey_0",
  "btnKey_q",
  "btnKey_w",
  "btnKey_e",
  "btnKey_r",
  "btnKey_t",
  "btnKey_y",
  "btnKey_u",
  "btnKey_i",
  "btnKey_o",
  "btnKey_p",
  "btnKey_a",
  "btnKey_s",
  "btnKey_d",
  "btnKey_f",
  "btnKey_g",
  "btnKey_h",
  "btnKey_j",
  "btnKey_k",
  "btnKey_l",
  "btnKey_z",
  "btnKey_x",
  "btnKey_c",
  "btnKey_v",
  "btnKey_b",
  "btnKey_n",
  "btnKey_m",
  "imgBlockFg",
  "frmInputArea",
  "lblUsrName",
  "lblPswd",
  "txteditUsr",
  "txteditPswd",
  "imgBioLogo",
  "ID_END_OF_WIDGETS",
  ""};

  static const char *toolTip[] = {
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  ""};

  static const char *whatsThis[] = {
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "images/block_fg.png",
  "",
  "",
  "",
  "",
  "",
  "images/osorno_logo.png",
  ""};

  static const int widgetType[ID_END_OF_WIDGETS+1] = {
  0,
  TQFrame,
  TQLabel,
  TQPushButton,
  TQPushButton,
  TQPushButton,
  TQPushButton,
  TQPushButton,
  TQPushButton,
  TQPushButton,
  TQPushButton,
  TQPushButton,
  TQPushButton,
  TQPushButton,
  TQPushButton,
  TQPushButton,
  TQPushButton,
  TQPushButton,
  TQPushButton,
  TQPushButton,
  TQPushButton,
  TQPushButton,
  TQPushButton,
  TQPushButton,
  TQPushButton,
  TQPushButton,
  TQPushButton,
  TQPushButton,
  TQPushButton,
  TQPushButton,
  TQPushButton,
  TQPushButton,
  TQPushButton,
  TQPushButton,
  TQPushButton,
  TQPushButton,
  TQPushButton,
  TQPushButton,
  TQPushButton,
  TQPushButton,
  TQPushButton,
  TQPushButton,
  TQPushButton,
  TQImage,
  TQFrame,
  TQLabel,
  TQLabel,
  TQLineEdit,
  TQLineEdit,
  TQImage,
  -1 };

static int generated_defineMask(PARAM *p)
{
  int w,h,depth;

  if(p == NULL) return 1;
  if(widgetName[0] == NULL) return 1; // suppress unused warning
  w = h = depth = strcmp(toolTip[0],whatsThis[0]);
  if(widgetType[0] == -1) return 1;
  if(w==h) depth=0; // fool the compiler
  pvStartDefinition(p,ID_END_OF_WIDGETS);

  pvQFrame(p,frmBg,0,Box,Plain,0,1);
  pvSetGeometry(p,frmBg,1,1,800,600);
  pvSetPaletteBackgroundColor(p,frmBg,120,120,70);
  pvSetFont(p,frmBg,"Sans",10,0,0,0,0);

  pvQLabel(p,lblStatusMessage,frmBg);
  pvSetGeometry(p,lblStatusMessage,156,210,480,40);
  pvSetPaletteForegroundColor(p,lblStatusMessage,255,0,0);
  pvSetFont(p,lblStatusMessage,"Sans",14,0,0,0,0);

  pvQPushButton(p,btnLogin,frmBg);
  pvSetGeometry(p,btnLogin,679,514,108,70);
  pvSetText(p,btnLogin,pvtr("Log In"));
  pvSetFont(p,btnLogin,"Sans",11,1,0,0,0);

  pvQPushButton(p,btnBack,frmBg);
  pvSetGeometry(p,btnBack,8,200,130,70);
  pvSetText(p,btnBack,pvtr("Escape"));
  pvSetFont(p,btnBack,"Sans",10,1,0,0,0);

  pvQPushButton(p,btnBackspace,frmBg);
  pvSetGeometry(p,btnBackspace,658,200,130,70);
  pvSetText(p,btnBackspace,pvtr("Backspace"));
  pvSetFont(p,btnBackspace,"Sans",10,1,0,0,0);

  pvQPushButton(p,btnCaps,frmBg);
  pvSetGeometry(p,btnCaps,8,514,107,70);
  pvSetText(p,btnCaps,pvtr("Caps Lock"));
  pvSetFont(p,btnCaps,"Sans",10,1,0,0,0);

  pvQPushButton(p,btnKey_1,frmBg);
  pvSetGeometry(p,btnKey_1,8,280,70,70);
  pvSetText(p,btnKey_1,pvtr("1"));
  pvSetFont(p,btnKey_1,"Sans",16,1,0,0,0);

  pvQPushButton(p,btnKey_2,frmBg);
  pvSetGeometry(p,btnKey_2,86,280,70,70);
  pvSetText(p,btnKey_2,pvtr("2"));
  pvSetFont(p,btnKey_2,"Sans",16,1,0,0,0);

  pvQPushButton(p,btnKey_3,frmBg);
  pvSetGeometry(p,btnKey_3,165,280,70,70);
  pvSetText(p,btnKey_3,pvtr("3"));
  pvSetFont(p,btnKey_3,"Sans",16,1,0,0,0);

  pvQPushButton(p,btnKey_4,frmBg);
  pvSetGeometry(p,btnKey_4,244,280,70,70);
  pvSetText(p,btnKey_4,pvtr("4"));
  pvSetFont(p,btnKey_4,"Sans",16,1,0,0,0);

  pvQPushButton(p,btnKey_5,frmBg);
  pvSetGeometry(p,btnKey_5,323,280,70,70);
  pvSetText(p,btnKey_5,pvtr("5"));
  pvSetFont(p,btnKey_5,"Sans",16,1,0,0,0);

  pvQPushButton(p,btnKey_6,frmBg);
  pvSetGeometry(p,btnKey_6,402,280,70,70);
  pvSetText(p,btnKey_6,pvtr("6"));
  pvSetFont(p,btnKey_6,"Sans",16,1,0,0,0);

  pvQPushButton(p,btnKey_7,frmBg);
  pvSetGeometry(p,btnKey_7,481,280,70,70);
  pvSetText(p,btnKey_7,pvtr("7"));
  pvSetFont(p,btnKey_7,"Sans",16,1,0,0,0);

  pvQPushButton(p,btnKey_8,frmBg);
  pvSetGeometry(p,btnKey_8,560,280,70,70);
  pvSetText(p,btnKey_8,pvtr("8"));
  pvSetFont(p,btnKey_8,"Sans",16,1,0,0,0);

  pvQPushButton(p,btnKey_9,frmBg);
  pvSetGeometry(p,btnKey_9,639,280,70,70);
  pvSetText(p,btnKey_9,pvtr("9"));
  pvSetFont(p,btnKey_9,"Sans",16,1,0,0,0);

  pvQPushButton(p,btnKey_0,frmBg);
  pvSetGeometry(p,btnKey_0,718,280,70,70);
  pvSetText(p,btnKey_0,pvtr("0"));
  pvSetFont(p,btnKey_0,"Sans",16,1,0,0,0);

  pvQPushButton(p,btnKey_q,frmBg);
  pvSetGeometry(p,btnKey_q,8,358,70,70);
  pvSetText(p,btnKey_q,pvtr("q"));
  pvSetFont(p,btnKey_q,"Sans",16,1,0,0,0);

  pvQPushButton(p,btnKey_w,frmBg);
  pvSetGeometry(p,btnKey_w,86,358,70,70);
  pvSetText(p,btnKey_w,pvtr("w"));
  pvSetFont(p,btnKey_w,"Sans",16,1,0,0,0);

  pvQPushButton(p,btnKey_e,frmBg);
  pvSetGeometry(p,btnKey_e,165,358,70,70);
  pvSetText(p,btnKey_e,pvtr("e"));
  pvSetFont(p,btnKey_e,"Sans",16,1,0,0,0);

  pvQPushButton(p,btnKey_r,frmBg);
  pvSetGeometry(p,btnKey_r,244,358,70,70);
  pvSetText(p,btnKey_r,pvtr("r"));
  pvSetFont(p,btnKey_r,"Sans",16,1,0,0,0);

  pvQPushButton(p,btnKey_t,frmBg);
  pvSetGeometry(p,btnKey_t,323,358,70,70);
  pvSetText(p,btnKey_t,pvtr("t"));
  pvSetFont(p,btnKey_t,"Sans",16,1,0,0,0);

  pvQPushButton(p,btnKey_y,frmBg);
  pvSetGeometry(p,btnKey_y,402,358,70,70);
  pvSetText(p,btnKey_y,pvtr("y"));
  pvSetFont(p,btnKey_y,"Sans",16,1,0,0,0);

  pvQPushButton(p,btnKey_u,frmBg);
  pvSetGeometry(p,btnKey_u,481,358,70,70);
  pvSetText(p,btnKey_u,pvtr("u"));
  pvSetFont(p,btnKey_u,"Sans",16,1,0,0,0);

  pvQPushButton(p,btnKey_i,frmBg);
  pvSetGeometry(p,btnKey_i,560,358,70,70);
  pvSetText(p,btnKey_i,pvtr("i"));
  pvSetFont(p,btnKey_i,"Sans",16,1,0,0,0);

  pvQPushButton(p,btnKey_o,frmBg);
  pvSetGeometry(p,btnKey_o,639,358,70,70);
  pvSetText(p,btnKey_o,pvtr("o"));
  pvSetFont(p,btnKey_o,"Sans",16,1,0,0,0);

  pvQPushButton(p,btnKey_p,frmBg);
  pvSetGeometry(p,btnKey_p,718,358,70,70);
  pvSetText(p,btnKey_p,pvtr("p"));
  pvSetFont(p,btnKey_p,"Sans",16,1,0,0,0);

  pvQPushButton(p,btnKey_a,frmBg);
  pvSetGeometry(p,btnKey_a,45,436,70,70);
  pvSetText(p,btnKey_a,pvtr("a"));
  pvSetFont(p,btnKey_a,"Sans",16,1,0,0,0);

  pvQPushButton(p,btnKey_s,frmBg);
  pvSetGeometry(p,btnKey_s,125,436,70,70);
  pvSetText(p,btnKey_s,pvtr("s"));
  pvSetFont(p,btnKey_s,"Sans",16,1,0,0,0);

  pvQPushButton(p,btnKey_d,frmBg);
  pvSetGeometry(p,btnKey_d,204,436,70,70);
  pvSetText(p,btnKey_d,pvtr("d"));
  pvSetFont(p,btnKey_d,"Sans",16,1,0,0,0);

  pvQPushButton(p,btnKey_f,frmBg);
  pvSetGeometry(p,btnKey_f,283,436,70,70);
  pvSetText(p,btnKey_f,pvtr("f"));
  pvSetFont(p,btnKey_f,"Sans",16,1,0,0,0);

  pvQPushButton(p,btnKey_g,frmBg);
  pvSetGeometry(p,btnKey_g,362,436,70,70);
  pvSetText(p,btnKey_g,pvtr("g"));
  pvSetFont(p,btnKey_g,"Sans",16,1,0,0,0);

  pvQPushButton(p,btnKey_h,frmBg);
  pvSetGeometry(p,btnKey_h,441,436,70,70);
  pvSetText(p,btnKey_h,pvtr("h"));
  pvSetFont(p,btnKey_h,"Sans",16,1,0,0,0);

  pvQPushButton(p,btnKey_j,frmBg);
  pvSetGeometry(p,btnKey_j,520,436,70,70);
  pvSetText(p,btnKey_j,pvtr("j"));
  pvSetFont(p,btnKey_j,"Sans",16,1,0,0,0);

  pvQPushButton(p,btnKey_k,frmBg);
  pvSetGeometry(p,btnKey_k,599,436,70,70);
  pvSetText(p,btnKey_k,pvtr("k"));
  pvSetFont(p,btnKey_k,"Sans",16,1,0,0,0);

  pvQPushButton(p,btnKey_l,frmBg);
  pvSetGeometry(p,btnKey_l,679,436,70,70);
  pvSetText(p,btnKey_l,pvtr("l"));
  pvSetFont(p,btnKey_l,"Sans",16,1,0,0,0);

  pvQPushButton(p,btnKey_z,frmBg);
  pvSetGeometry(p,btnKey_z,125,514,70,70);
  pvSetText(p,btnKey_z,pvtr("z"));
  pvSetFont(p,btnKey_z,"Sans",16,1,0,0,0);

  pvQPushButton(p,btnKey_x,frmBg);
  pvSetGeometry(p,btnKey_x,204,514,70,70);
  pvSetText(p,btnKey_x,pvtr("x"));
  pvSetFont(p,btnKey_x,"Sans",16,1,0,0,0);

  pvQPushButton(p,btnKey_c,frmBg);
  pvSetGeometry(p,btnKey_c,283,514,70,70);
  pvSetText(p,btnKey_c,pvtr("c"));
  pvSetFont(p,btnKey_c,"Sans",16,1,0,0,0);

  pvQPushButton(p,btnKey_v,frmBg);
  pvSetGeometry(p,btnKey_v,362,514,70,70);
  pvSetText(p,btnKey_v,pvtr("v"));
  pvSetFont(p,btnKey_v,"Sans",16,1,0,0,0);

  pvQPushButton(p,btnKey_b,frmBg);
  pvSetGeometry(p,btnKey_b,441,514,70,70);
  pvSetText(p,btnKey_b,pvtr("b"));
  pvSetFont(p,btnKey_b,"Sans",16,1,0,0,0);

  pvQPushButton(p,btnKey_n,frmBg);
  pvSetGeometry(p,btnKey_n,520,514,70,70);
  pvSetText(p,btnKey_n,pvtr("n"));
  pvSetFont(p,btnKey_n,"Sans",16,1,0,0,0);

  pvQPushButton(p,btnKey_m,frmBg);
  pvSetGeometry(p,btnKey_m,599,514,70,70);
  pvSetText(p,btnKey_m,pvtr("m"));
  pvSetFont(p,btnKey_m,"Sans",16,1,0,0,0);

  pvDownloadFile(p,"images/block_fg.png");
  pvQImage(p,imgBlockFg,frmBg,"images/block_fg.png",&w,&h,&depth);
  pvSetGeometry(p,imgBlockFg,799,599,800,600);
  pvSetFont(p,imgBlockFg,"Sans",10,0,0,0,0);
  pvSetWhatsThis(p,imgBlockFg,pvtr("images/block_fg.png"));

  pvQFrame(p,frmInputArea,frmBg,Box,Plain,0,1);
  pvSetGeometry(p,frmInputArea,9,9,780,175);
  pvSetPaletteBackgroundColor(p,frmInputArea,200,200,180);
  pvSetFont(p,frmInputArea,"Sans",10,0,0,0,0);

  pvQLabel(p,lblUsrName,frmInputArea);
  pvSetGeometry(p,lblUsrName,33,45,150,30);
  pvSetText(p,lblUsrName,pvtr("Username:"));
  pvSetPaletteForegroundColor(p,lblUsrName,120,120,70);
  pvSetFont(p,lblUsrName,"Sans",16,1,0,0,0);

  pvQLabel(p,lblPswd,frmInputArea);
  pvSetGeometry(p,lblPswd,33,96,145,30);
  pvSetText(p,lblPswd,pvtr("Password:"));
  pvSetPaletteForegroundColor(p,lblPswd,120,120,70);
  pvSetFont(p,lblPswd,"Sans",16,1,0,0,0);

  pvQLineEdit(p,txteditUsr,frmInputArea);
  pvSetGeometry(p,txteditUsr,180,36,230,40);
  pvSetPaletteBackgroundColor(p,txteditUsr,255,255,255);
  pvSetFont(p,txteditUsr,"Sans",13,0,0,0,0);

  pvQLineEdit(p,txteditPswd,frmInputArea);
  pvSetGeometry(p,txteditPswd,180,93,230,40);
  pvSetPaletteBackgroundColor(p,txteditPswd,255,255,255);
  pvSetFont(p,txteditPswd,"Sans",13,0,0,0,0);

  pvDownloadFile(p,"images/osorno_logo.png");
  pvQImage(p,imgBioLogo,frmInputArea,"images/osorno_logo.png",&w,&h,&depth);
  pvSetGeometry(p,imgBioLogo,550,60,192,49);
  pvSetFont(p,imgBioLogo,"Sans",10,0,0,0,0);
  pvSetWhatsThis(p,imgBioLogo,pvtr("images/osorno_logo.png"));


  pvEndDefinition(p);
  return 0;
}

// _end_of_generated_area_ (do not edit -> use ui2pvc) ---------------------

#include "mask5_slots.h"

//!****************************************************************************
static int defineMask(PARAM *p)
{
  if(p == NULL) return 1;
  
  generated_defineMask(p);

  return 0;
}

//!****************************************************************************
static int showData(PARAM *p, DATA *d)
{
  if (p == NULL || d == NULL) return 1;
  //+++ temp commented
  //observer_timeout_monitoring(p, imgBlockFg, lblStatusMessage, &(d->session));

  return 0;
}

//!****************************************************************************
static int readData(DATA *d)
{
  if(d == NULL) return 1;

  return 0;
}

//!****************************************************************************
int show_mask5(PARAM *p)
{
  DATA d;
  char event[MAX_EVENT_LENGTH];
  char text[MAX_EVENT_LENGTH];
  char str1[MAX_EVENT_LENGTH];
  int  i,w,h,val,x,y,button,ret;
  float xval, yval;

  defineMask(p);
  //rlSetDebugPrintf(1);
  if((ret=slotInit(p,&d)) != 0) return ret;
  
  readData(&d); //! from shared memory, database or something else
  showData(p,&d);
  
  pvClearMessageQueue(p);
  while(1)
  {
    //reset_resolved_event_requests();
    pvPollEvent(p,event);
    switch(pvParseEvent(event, &i, text))
    {
      case NULL_EVENT:
        readData(&d); //! from shared memory, database or something else
        showData(p,&d);
        //++temp commented
        //reset_resolved_event_requests();
        if((ret=slotNullEvent(p,&d)) != 0) return ret;
        break;
      case BUTTON_EVENT:
        if(trace) printf("BUTTON_EVENT id=%d\n",i);
        if((ret=slotButtonEvent(p,i,&d)) != 0) return ret;
        break;
      case BUTTON_PRESSED_EVENT:
        if(trace) printf("BUTTON_PRESSED_EVENT id=%d\n",i);
        if((ret=slotButtonPressedEvent(p,i,&d)) != 0) return ret;
        break;
      case BUTTON_RELEASED_EVENT:
        if(trace) printf("BUTTON_RELEASED_EVENT id=%d\n",i);
        if((ret=slotButtonReleasedEvent(p,i,&d)) != 0) return ret;
        break;
      case TEXT_EVENT:
        if(trace) printf("TEXT_EVENT id=%d %s\n",i,text);
        if((ret=slotTextEvent(p,i,&d,text)) != 0) return ret;
        break;
      case SLIDER_EVENT:
        sscanf(text,"(%d)",&val);
        if(trace) printf("SLIDER_EVENT val=%d\n",val);
        if((ret=slotSliderEvent(p,i,&d,val)) != 0) return ret;
        break;
      case CHECKBOX_EVENT:
        if(trace) printf("CHECKBOX_EVENT id=%d %s\n",i,text);
        if((ret=slotCheckboxEvent(p,i,&d,text)) != 0) return ret;
        break;
      case RADIOBUTTON_EVENT:
        if(trace) printf("RADIOBUTTON_EVENT id=%d %s\n",i,text);
        if((ret=slotRadioButtonEvent(p,i,&d,text)) != 0) return ret;
        break;
      case GL_INITIALIZE_EVENT:
        if(trace) printf("you have to call initializeGL()\n");
        if((ret=slotGlInitializeEvent(p,i,&d)) != 0) return ret;
        break;
      case GL_PAINT_EVENT:
        if(trace) printf("you have to call paintGL()\n");
        if((ret=slotGlPaintEvent(p,i,&d)) != 0) return ret;
        break;
      case GL_RESIZE_EVENT:
        sscanf(text,"(%d,%d)",&w,&h);
        if(trace) printf("you have to call resizeGL(w,h)\n");
        if((ret=slotGlResizeEvent(p,i,&d,w,h)) != 0) return ret;
        break;
      case GL_IDLE_EVENT:
        if((ret=slotGlIdleEvent(p,i,&d)) != 0) return ret;
        break;
      case TAB_EVENT:
        sscanf(text,"(%d)",&val);
        if(trace) printf("TAB_EVENT(%d,page=%d)\n",i,val);
        if((ret=slotTabEvent(p,i,&d,val)) != 0) return ret;
        break;
      case TABLE_TEXT_EVENT:
        sscanf(text,"(%d,%d,",&x,&y);
        pvGetText(text,str1);
        if(trace) printf("TABLE_TEXT_EVENT(%d,%d,\"%s\")\n",x,y,str1);
        if((ret=slotTableTextEvent(p,i,&d,x,y,str1)) != 0) return ret;
        break;
      case TABLE_CLICKED_EVENT:
        sscanf(text,"(%d,%d,%d)",&x,&y,&button);
        if(trace) printf("TABLE_CLICKED_EVENT(%d,%d,button=%d)\n",x,y,button);
        if((ret=slotTableClickedEvent(p,i,&d,x,y,button)) != 0) return ret;
        break;
      case SELECTION_EVENT:
        sscanf(text,"(%d,",&val);
        pvGetText(text,str1);
        if(trace) printf("SELECTION_EVENT(column=%d,\"%s\")\n",val,str1);
        if((ret=slotSelectionEvent(p,i,&d,val,str1)) != 0) return ret;
        break;
      case CLIPBOARD_EVENT:
        sscanf(text,"(%d",&val);
        if(trace) printf("CLIPBOARD_EVENT(id=%d)\n",val);
        if(trace) printf("clipboard = \n%s\n",p->clipboard);
        if((ret=slotClipboardEvent(p,i,&d,val)) != 0) return ret;
        break;
      case RIGHT_MOUSE_EVENT:
        if(trace) printf("RIGHT_MOUSE_EVENT id=%d text=%s\n",i,text);
        if((ret=slotRightMouseEvent(p,i,&d,text)) != 0) return ret;
        break;
      case KEYBOARD_EVENT:
        sscanf(text,"(%d",&val);
        if(trace) printf("KEYBOARD_EVENT modifier=%d key=%d\n",i,val);
        if((ret=slotKeyboardEvent(p,i,&d,val,i)) != 0) return ret;
        break;
      case PLOT_MOUSE_MOVED_EVENT:
        sscanf(text,"(%f,%f)",&xval,&yval);
        if(trace) printf("PLOT_MOUSE_MOVE %f %f\n",xval,yval);
        if((ret=slotMouseMovedEvent(p,i,&d,xval,yval)) != 0) return ret;
        break;
      case PLOT_MOUSE_PRESSED_EVENT:
        sscanf(text,"(%f,%f)",&xval,&yval);
        if(trace) printf("PLOT_MOUSE_PRESSED %f %f\n",xval,yval);
        if((ret=slotMousePressedEvent(p,i,&d,xval,yval)) != 0) return ret;
        break;
      case PLOT_MOUSE_RELEASED_EVENT:
        sscanf(text,"(%f,%f)",&xval,&yval);
        if(trace) printf("PLOT_MOUSE_RELEASED %f %f\n",xval,yval);
        if((ret=slotMouseReleasedEvent(p,i,&d,xval,yval)) != 0) return ret;
        break;
      case MOUSE_OVER_EVENT:
        sscanf(text,"%d",&val);
        if(trace) printf("MOUSE_OVER_EVENT %d\n",val);
        if((ret=slotMouseOverEvent(p,i,&d,val)) != 0) return ret;
        break;
      case USER_EVENT:
        if(trace) printf("USER_EVENT id=%d %s\n",i,text);
        if((ret=slotUserEvent(p,i,&d,text)) != 0) return ret;
        break;
      default:
        if(trace) printf("UNKNOWN_EVENT id=%d %s\n",i,text);
        break;
    }
  }
}